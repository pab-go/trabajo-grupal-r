filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, id_elec) |>
summarise(
max_votos = max(votos),
partido_ganador = partidos[which.max(votos)],
.groups = "drop"
)
# Mostrar los resultados
print(ganadores)
View(election_data)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"),.before = everything(),
fecha = as_date(glue("{anno}-{mes}"),.before = everything())
) |>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"),.before = everything(),
fecha = as_date(glue("{anno}-{mes}-01"), .before = everything())
) |>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}") .before = everything()),
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, id_elec) |>
summarise(
max_votos = max(votos),
partido_ganador = partidos[which.max(votos)],
.groups = "drop"
)
# Mostrar los resultados
print(ganadores)
View(ganadores)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, fecha) |>
summarise(
max_votos = max(votos),
.keep_all
)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, fecha) |>
summarise(
max_votos = max(votos)
)
# Mostrar los resultados
print(ganadores)
View(election_data)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()|> select(id_mun, fecha, siglas, votos)
# Mostrar los resultados
print(ganadores)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()|> select(id_mun, fecha, siglas, votos)
# Mostrar los resultados
print(ganadores)
#Inner join para saber el nombre del municipio
ganadores <- ganadores |>
inner_join(cod_mun, by = c("id_mun"="cod_mun"))
View(ganadores)
View(election_data)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> filter(unique(participacion))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> filter(distinct(participacion))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo)
View(election_data_rcs)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(n=1,.by = participacion)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
View(election_data_rcs)
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
# abbrev, cod_mun ya están en formato tidydata.
# election_data y surveys no están en formato tidydata ya que en cada fila nos encontramos con los votos en cada municipio para todos los partidos. Una fila solo debe contener una única observación.
election_data <-
election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas),
names_to = "partidos", values_to = "votos",
values_drop_na = TRUE) |>
mutate(across(where(is.logical), as.numeric))
surveys <-
surveys |>
pivot_longer(cols = -c(type_survey:turnout),
names_to = "partido", values_to = "puntuacion",
values_drop_na = TRUE) |>
mutate(across(where(is.logical), as.numeric))
# vemos primero cantidad de valores únicos en cada una
election_data_dist <- election_data |> summarise(across(everything(), n_distinct))
cod_mun_dist <- cod_mun |> summarise(across(everything(), n_distinct))
surveys_dist <- surveys |> summarise(across(everything(), n_distinct))
abbrev_dist <- abbrev |> summarise(across(everything(), n_distinct))
# en tres (tipo_eleccion, vuelta, codigo_distrito_electoral) tenemos
# un solo valor cte --> no nos aporta nada
election_data <-
election_data |>
select(-c(tipo_eleccion, vuelta, codigo_distrito_electoral))
surveys <- surveys |> select(-type_survey)
election_data <-
election_data |>
mutate("siglas" = case_when(
str_detect(partidos, "SOCIALISTA|SOCIALISTES")~ "PSOE",
str_detect(partidos, "PARTIDO POPULAR") ~ "PP",
str_detect(partidos, "CIUDADANOS|CIUDADANÍA|CIUDADANIA|CIUTADANS") ~ "CS",
str_detect(partidos, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(partidos, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(partidos, "PODEMOS|IZQUIERDA UNIDA") ~ "UP",
str_detect(partidos, "ESQUERRA REPUBLICANA DE CAT") ~ "ERC",
str_detect(partidos, "SORTU|EUSKO ALKARTASUNA|ARALAR|ALTERNATIBA")~"BILDU",
str_detect(partidos, "MÁS PAÍS|MAS PAIS|MÁS PAIS|MAS PAÍS") ~ "MP",
str_detect(partidos, "VOX") ~ "VOX",
str_detect(partidos,"CONVERGÈNCIA I UNIÓ")~"CONVERGÈNCIA I UNIÓ",
TRUE ~ "OTROS"))
encuestas_filtradas <- surveys |>
filter(
as.numeric(format(date_elec, "%Y")) >= 2008,  # Elecciones desde 2008
exit_poll == FALSE,                           # No sean a pie de urna
!is.na(size) & size >= 500,                   # Tamaño muestral conocido y >= 500
field_date_to - field_date_from > 1 # Más de 1 día de trabajo de campo
)
library(dplyr)
library(glue)
# Transformar los datos y generar identificadores
election_data_censo_grande <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)|>
filter(censo >= 100000)  # Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data_censo_grande |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()|> select(id_mun, fecha, siglas, votos)
# Mostrar los resultados
print(ganadores)
#Inner join para saber el nombre del municipio
ganadores <- ganadores |>
inner_join(cod_mun, by = c("id_mun"="cod_mun"))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
View(election_data_rcs)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs)+
geom_point(aes(x=censo,y=participacion))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs)+
geom_point(aes(x=partiipacion,y=censo))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs)+
geom_point(aes(x=participacion,y=censo))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs)+
geom_point(aes(x=censo,y=participacion, alpha = censo))
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.position = "top"  # Posición de la leyenda
)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
legend.position = "top"  # Posición de la leyenda
)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 9, hjust = 0.5),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.position = "top"  # Posición de la leyenda
)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
##GRAFICO RELACION CENSO Y VOTO
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 9, hjust = 0.5),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.position = "top"  # Posición de la leyenda
)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
election_data_rcs2 <- election_data_rcs |> filter(censo <= 2500)
View(election_data_rcs2)
View(ganadores)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
##GRAFICO RELACION CENSO Y VOTO
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 9, hjust = 0.5),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.position = "top"  # Posición de la leyenda
)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
View(ganadores2)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
##GRAFICO RELACION CENSO Y VOTO
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 9, hjust = 0.5),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.position = "top"  # Posición de la leyenda
)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
ggplot(ganadores2)+geom_bar(x=siglas)
library(ggplot2)
election_data_rcs <- election_data |>
mutate("participacion" = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo) |> slice(1,.by = participacion)
##GRAFICO RELACION CENSO Y VOTO
ggplot(election_data_rcs, aes(x = censo, y = participacion)) +
geom_point(aes(color = participacion), size = 3, alpha = 0.7) +  # Puntos de dispersión
geom_smooth(method = "lm", color = "blue", se = TRUE, linetype = "dashed") +  # Línea de regresión
scale_color_gradient(low = "yellow", high = "red", name = "Participación (%)") +  # Gradiente de color
labs(
title = "Relación entre Censo y Participación",
subtitle = "Datos simulados de participación electoral",
x = "Censo (número de votantes)",
y = "Participación (%)",
caption = "Fuente: Datos simulados"
) +
theme_minimal(base_size = 14) +  # Tema minimalista
theme(
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),  # Personalización del título
plot.subtitle = element_text(size = 9, hjust = 0.5),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
legend.position = "top"  # Posición de la leyenda
)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
grafico2 <- ggplot(ganadores2)+geom_bar(x=siglas)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
grafico2 <- ggplot(ganadores2)+geom_bar(x=siglas)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
grafico2 <- ggplot(ganadores2)+geom_bar(x= siglas)
View(ganadores2)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
grafico2 <- ggplot(ganadores2)+geom_bar(aes(x= siglas)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
grafico2 <- ggplot(ganadores2)+geom_bar(aes(x= siglas))
View(grafico2)
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
ggplot(ganadores2)+geom_bar(aes(x= siglas))
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup() |> mutate(siglas=fct_reorder(siglas,n, .desc = TRUE))
##AHora lo haremos para las zonas rurales, es decir, con menos de 2500 habitantes
ganadores2 <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
) |>
filter(censo <= 2500) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup()
ggplot(ganadores2)+geom_bar(aes(x= siglas))

"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
)) +  # Colores para las siglas
labs(title = "Distribución de Diferencia porcentual", x = "Categorías", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(axis.text.x = element_blank())  # Eliminar etiquetas del eje X
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(x = siglas, y = dif_perc, fill = siglas),  # Mapeo correcto
outlier.shape = 16, outlier.size = 2, outlier.colour = "black") +  # Puntos de outliers
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje Y de -50 a 50
scale_fill_manual(values = c(  # Colores para las siglas
"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
)) +  # Asignar colores a las siglas
labs(title = "Distribución de Diferencia porcentual por zona", x = "Siglas", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar los labels del eje X
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes( y = dif_perc, fill = siglas),  # Mapeo correcto
outlier.shape = 16, outlier.size = 2, outlier.colour = "black") +  # Puntos de outliers
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje Y de -50 a 50
scale_fill_manual(values = c(  # Colores para las siglas
"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
)) +  # Asignar colores a las siglas
labs(title = "Distribución de Diferencia porcentual por zona", x = "Siglas", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar los labels del eje X
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = siglas)) +  # Cajas y bigotes para la diferencia porcentual
scale_y_continuous(limits = c(-50, 50)) +  # Ajustar los límites del eje Y
scale_fill_manual(values = c(  # Colores personalizados para cada sigla
"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
)) +  # Asignar colores a las siglas
labs(title = "Distribución de Diferencia porcentual por zona", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(
axis.text.x = element_blank(),  # Eliminar texto en el eje X
axis.ticks.x = element_blank(),  # Eliminar las marcas del eje X
axis.title.x = element_blank()  # Eliminar título del eje X
)
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = "blue")) +  # Una sola caja para toda la variable
scale_y_continuous(limits = c(-50, 50)) +  # Ajuste de los límites del eje Y
scale_fill_manual(values = c("blue")) +  # Un solo color para toda la caja
labs(title = "Distribución de Diferencia porcentual", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(
axis.text.x = element_blank(),  # Eliminar el eje X
axis.ticks.x = element_blank(),  # Eliminar las marcas del eje X
axis.title.x = element_blank(),  # Eliminar el título del eje X
axis.line.x = element_blank()   # Eliminar la línea del eje X
)
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = "blue")) +  # Caja para toda la variable
geom_jitter(aes(y = dif_perc, color = siglas), width = 0.2) +  # Puntos de los outliers con siglas
scale_y_continuous(limits = c(-50, 50)) +  # Ajustar los límites del eje Y
scale_fill_manual(values = c("blue")) +  # Un solo color para la caja
scale_color_manual(values = c(  # Colores para los puntos de cada sigla
"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
)) +
labs(title = "Distribución de Diferencia porcentual", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(
axis.text.x = element_blank(),  # Eliminar el eje X
axis.ticks.x = element_blank(),  # Eliminar las marcas del eje X
axis.title.x = element_blank(),  # Eliminar el título del eje X
axis.line.x = element_blank()   # Eliminar la línea del eje X
)
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = "blue")) +  # Caja para toda la variable
geom_jitter(aes(y = dif_perc, color = siglas), width = 0.2) +  # Puntos de los outliers con siglas
scale_y_continuous(limits = c(-50, 50)) +  # Ajustar los límites del eje Y
scale_fill_manual(values = c("blue")) +  # Un solo color para la caja
scale_color_manual(values = c(  # Colores para los puntos de cada sigla
"CS" = "orange",
"UP" = "purple",
"VOX" = "green",
"OTROS" = "grey",
"MP" = "#009975",
"BNG" = "#6AADE4",
"PNV" = "#086522",
"CONVERGÈNCIA I UNIÓ" = "#FFDFC4",
"ERC" = "yellow",
"BILDU" = "#30D5C8",
"PSOE" = "red",
"PP" = "blue"
))
library(dplyr)
library(glue)
library(lubridate)
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
library(forcats)
ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y = dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-50, 50)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))
ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = "blue")) +  # Una sola caja para toda la variable
scale_y_continuous(limits = c(-4, 4)) +  # Ajuste de los límites del eje Y
scale_fill_manual(values = c("blue")) +  # Un solo color para toda la caja
labs(title = "Distribución de Diferencia porcentual", y = "Diferencia porcentual") +
theme_minimal() +  # Estilo minimalista
theme(
axis.text.x = element_blank(),  # Eliminar el eje X
axis.ticks.x = element_blank(),  # Eliminar las marcas del eje X
axis.title.x = element_blank(),  # Eliminar el título del eje X
axis.line.x = element_blank()   # Eliminar la línea del eje X
)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)  |>
select(-anno, -mes, -codigo_ccaa, -codigo_provincia, -codigo_municipio) |>
select(fecha, id_mun, everything())
rm(list = ls())
library(tidyverse)
library(dplyr)
library(glue)
library(ggplot2)
library(lubridate)
library(forcats)
library(patchwork)
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
# abbrev, cod_mun ya están en formato tidydata.
# election_data y surveys no están en formato tidydata ya que en cada fila nos encontramos con los votos en cada municipio para todos los partidos. Una fila solo debe contener una única observación.
election_data <-
election_data |>
pivot_longer(cols = -c(tipo_eleccion:votos_candidaturas),
names_to = "partidos", values_to = "votos",
values_drop_na = TRUE) |>
mutate(across(where(is.logical), as.numeric))
surveys <-
surveys |>
pivot_longer(cols = -c(type_survey:turnout),
names_to = "partido", values_to = "puntuacion",
values_drop_na = TRUE) |>
mutate(across(where(is.logical), as.numeric))
# vemos primero cantidad de valores únicos en cada una
election_data_dist <- election_data |> summarise(across(everything(), n_distinct))
cod_mun_dist <- cod_mun |> summarise(across(everything(), n_distinct))
surveys_dist <- surveys |> summarise(across(everything(), n_distinct))
abbrev_dist <- abbrev |> summarise(across(everything(), n_distinct))
# en tres (tipo_eleccion, vuelta, codigo_distrito_electoral) tenemos
# un solo valor cte --> no nos aporta nada
election_data <-
election_data |>
select(-c(tipo_eleccion, vuelta, codigo_distrito_electoral))
surveys <- surveys |> select(-type_survey)
election_data <-
election_data |>
mutate("siglas" = case_when(
str_detect(partidos, "SOCIALISTA|SOCIALISTES")~ "PSOE",
str_detect(partidos, "PARTIDO POPULAR") ~ "PP",
str_detect(partidos, "CIUDADANOS|CIUDADANÍA|CIUDADANIA|CIUTADANS") ~ "CS",
str_detect(partidos, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(partidos, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(partidos, "PODEMOS|IZQUIERDA UNIDA") ~ "UP",
str_detect(partidos, "ESQUERRA REPUBLICANA DE CAT") ~ "ERC",
str_detect(partidos, "SORTU|EUSKO ALKARTASUNA|ARALAR|ALTERNATIBA")~"BILDU",
str_detect(partidos, "MÁS PAÍS|MAS PAIS|MÁS PAIS|MAS PAÍS") ~ "MP",
str_detect(partidos, "VOX") ~ "VOX",
str_detect(partidos,"CONVERGÈNCIA I UNIÓ")~"CONVERGÈNCIA I UNIÓ",
TRUE ~ "OTROS"))
View(election_data)
# Transformar los datos y generar identificadores
election_data <- election_data |>
mutate(
id_mun = (glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")),
fecha = (as_date(glue("{anno}-{mes}-01")))
)  |>
select(-anno, -mes, -codigo_ccaa, -codigo_provincia, -codigo_municipio) |>
select(fecha, id_mun, everything())
# Filtrar municipios con más de 100,000 habitantes
# Encontrar el partido ganador usando summarise y max
ganadores <- election_data |>
filter(censo >= 100000) |>
group_by(id_mun, fecha) |>
slice_max(order_by = votos, n = 1) |>  # Máximo voto por grupo
ungroup() |>
select(id_mun, fecha, siglas, votos)
# Mostrar los resultados
print(ganadores)
#Inner join para saber el nombre del municipio
ganadores <- ganadores |>
inner_join(cod_mun, by = c("id_mun"="cod_mun"))
resultado_PSOE <- election_data |>
group_by(fecha, id_mun) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
filter(ranking == 1 & siglas == "PSOE") |>
# Hacer un join con los datos del segundo partido más votado en los mismos grupos
left_join(
election_data |>
group_by(fecha, id_mun) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
filter(ranking == 2) |>
select(fecha, id_mun, siglas_segundo = siglas, votos_segundo = votos),
by = c("fecha", "id_mun")
) |>
select(fecha, id_mun, censo, participacion_1, participacion_2,
siglas_primero = siglas, votos_primero = votos,
siglas_segundo, votos_segundo)
#para el ver con el PP solo hace falta cambiar el nombre
resultado_PP <- election_data |>
group_by(fecha, id_mun) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
filter(ranking == 1 & siglas == "PP") |>
# Hacer un join con los datos del segundo partido más votado en los mismos grupos
left_join(
election_data |>
group_by(fecha, id_mun) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
filter(ranking == 2) |>
select(fecha, id_mun, siglas_segundo = siglas, votos_segundo = votos),
by = c("fecha", "id_mun")
) |>
select(fecha, id_mun, censo, participacion_1, participacion_2,
siglas_primero = siglas, votos_primero = votos,
siglas_segundo, votos_segundo)
encuestas_filtradas <- surveys |>
filter(
as.numeric(format(date_elec, "%Y")) >= 2008,  # Elecciones desde 2008
exit_poll == FALSE,                           # No sean a pie de urna
!is.na(size) & size >= 500,                   # Tamaño muestral conocido y >= 500
field_date_to - field_date_from > 1 # Más de 1 día de trabajo de campo
)
View(encuestas_filtradas)
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"))
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- surveys |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"))
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- surveys |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
participacion = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo)
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- encuestas_filtradas |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Seleccionar el partido ganador por municipio y clasificar por zona
election_data <- election_data |>
mutate(
zona = if_else(censo <= 2500, "Rural", "Urbana")                      # Clasificación por zona
)
votos_por_zona <- election_data |> summarise(votos=sum(votos), .by = c(zona,siglas))
votos_por_zona2 <- votos_por_zona |> pivot_wider(names_from = zona, values_from = votos) |> mutate(rural=(Rural/sum(Rural))*100, urbana=(Urbana/sum(Urbana))*100, dif_perc=rural-urbana)
#TEst de wilcoxon-MAnWhitney
wilcox.test(votos_por_zona2$rural, votos_por_zona2$urbana, paired = TRUE)
#UN gráfico para verlo, aunque no hay muchas diferencias
barras_rural <- ggplot(votos_por_zona2) +
geom_col(aes(x = fct_reorder(siglas, dif_perc), y= dif_perc,fill=siglas)) +  # Colorear las barras
scale_y_continuous(limits = c(-35, 35)) +  # Escala en el eje y de -100 a 100
scale_fill_manual(values= c(CS = "orange", UP = "purple", VOX = "green",OTROS="grey",MP="#009975",BNG="#6AADE4",PNV="#086522","CONVERGÈNCIA I UNIÓ"="#FFDFC4",ERC="yellow",BILDU="#30D5C8",PSOE="red", PP="blue"))+theme(legend.position = "bottom")+labs(x="partidos",y="diferencia")
bigotes_rural <-ggplot(votos_por_zona2) +
geom_boxplot(aes(y = dif_perc, fill = "blue"), width = 0.5) +  # Una sola caja para toda la variable
scale_y_continuous(limits = c(-4, 4)) +  # Ajuste de los límites del eje Y
scale_fill_manual(values = c("blue")) +  # Un solo color para toda la caja
theme_minimal() +  # Estilo minimalista
theme(
axis.text.x = element_blank(),  # Eliminar el eje X
axis.ticks.x = element_blank(),  # Eliminar las marcas del eje X
axis.title.x = element_blank(),  # Eliminar el título del eje X
axis.line.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"   # Eliminar la línea del eje X
)
graficos_unidos <- barras_rural+bigotes_rural+
plot_layout(ncol = 2, widths = c(2.75, 1.25))
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
participacion = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo)
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- encuestas_filtradas |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Calcular el error absoluto
elecciones_encuestas <- elecciones_encuestas |>
mutate(error_absoluto = abs(participacion - puntuacion))
View(elecciones_encuestas)
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
votos_estimados_censo = puntuacion / 100 * censo,
error_censo = abs(votos_estimados_censo - votos)
)
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
votos_estimados_censo = puntuacion / 100 * censo,
error_censo = abs(votos_estimados_censo - votos)
)
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
participacion = 100*(votos_candidaturas + votos_blancos + votos_nulos) / censo)
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- encuestas_filtradas |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Calcular el error absoluto
elecciones_encuestas <- elecciones_encuestas |>
mutate(votos_estimados_censo = puntuacion / 100 * censo,
error_censo = abs(votos_estimados_censo - votos)
)
# Creamos una variable en election_data y en surveys que sea la fecha de las elecciones sin el día
election_data <- election_data |>
mutate(fecha_año_mes = format(fecha, "%Y-%m"),
participacion = votos_candidaturas + votos_blancos + votos_nulos)
encuestas_filtradas <- encuestas_filtradas |>
mutate(fecha_año_mes = format(date_elec, "%Y-%m"))
# Unir las tablas surveys y election_data por las columnas fecha_año_mes y partido/siglas
elecciones_encuestas <- encuestas_filtradas |>
inner_join(election_data, by = c("fecha_año_mes" = "fecha_año_mes", "partido" = "siglas"),relationship =
"many-to-many") |> select(-c(participacion_1,participacion_2,numero_mesas,zona,size,turnout,partidos))
# Calcular el error absoluto
elecciones_encuestas <- elecciones_encuestas |>
mutate(votos_estimados_censo = puntuacion / 100 * censo,
error_censo = abs(votos_estimados_censo - votos)
)
